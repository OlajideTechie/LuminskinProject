"use strict";
Cypress.Commands.add('fill', {
    prevSubject: 'element'
}, function (subject, value, options) {
    var _a, _b;
    if (options === void 0) { options = { overwrite: true, prepend: false }; }
    var element = subject[0];
    var isInputOrTextarea = element.tagName.toLowerCase() === 'input' ||
        element.tagName.toLowerCase() === 'textarea';
    var inputEvent = new Event('input', { bubbles: true });
    var overwrite = options.overwrite, prepend = options.prepend;
    var textValue = value;
    if (isInputOrTextarea) {
        var nativeInputValueSetter = (_a = Object.getOwnPropertyDescriptor(window.HTMLInputElement.prototype, 'value')) === null || _a === void 0 ? void 0 : _a.set;
        var nativeTextAreaValueSetter = (_b = Object.getOwnPropertyDescriptor(window.HTMLTextAreaElement.prototype, 'value')) === null || _b === void 0 ? void 0 : _b.set;
        if (!overwrite) {
            textValue = prepend
                ? "" + value + element.value
                : "" + element.value + value;
        }
        var nativeSetter = element.tagName.toLowerCase() === 'input'
            ? nativeInputValueSetter
            : nativeTextAreaValueSetter;
        nativeSetter === null || nativeSetter === void 0 ? void 0 : nativeSetter.call(element, textValue);
        element.dispatchEvent(inputEvent);
    }
    else if (element.isContentEditable) {
        element.focus();
        cy.document().then(function (doc) {
            var selection = doc.getSelection();
            selection === null || selection === void 0 ? void 0 : selection.removeAllRanges();
            var range = doc.createRange();
            range.selectNodeContents(element);
            selection === null || selection === void 0 ? void 0 : selection.addRange(range);
            if (overwrite === true) {
                range.deleteContents();
            }
            if (prepend === true) {
                selection === null || selection === void 0 ? void 0 : selection.collapseToStart();
            }
            else {
                selection === null || selection === void 0 ? void 0 : selection.collapseToEnd();
            }
            doc.execCommand('insertText', false, "" + value);
            element.dispatchEvent(inputEvent);
        });
    }
    Cypress.log({
        name: 'fill',
        message: value,
        $el: subject,
        consoleProps: function () {
            return {
                value: value,
                options: options
            };
        }
    });
    cy.wrap(element);
});
